"use strict";(self.webpackChunkbase=self.webpackChunkbase||[]).push([[501],{48222:t=>{t.exports=function(){let{mustBeMetaMask:t=!1,silent:e=!1,timeout:i=3e3}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(){if("boolean"!==typeof t)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!==typeof e)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!==typeof i)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let n=!1;return new Promise((s=>{function a(){if(n)return;n=!0,window.removeEventListener("ethereum#initialized",a);const{ethereum:i}=window;if(!i||t&&!i.isMetaMask){const n=t&&i?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!e&&console.error("@metamask/detect-provider:",n),s(null)}else s(i)}window.ethereum?a():(window.addEventListener("ethereum#initialized",a,{once:!0}),setTimeout((()=>{a()}),i))}))}},96039:(t,e,i)=>{i.d(e,{d:()=>s});var n=i(46622);class s extends n.J5{async init(t){this.chainConfig||(this.chainConfig=(0,n.h2)(n.EN.EIP155,1))}async authenticateUser(){if(!this.provider||this.status!==n.MP.CONNECTED)throw n.RM.notConnectedError();const{chainNamespace:t,chainId:e}=this.chainConfig,i=await this.provider.request({method:"eth_accounts"});if(i&&i.length>0){const s=(0,n.Cb)(i[0],this.name);if(s){if(!(0,n.$E)(s))return{idToken:s}}const a={domain:window.location.origin,uri:window.location.href,address:i[0],chainId:parseInt(e,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:(new Date).toISOString()},r=await(0,n.tV)(a,t),o=await this.provider.request({method:"personal_sign",params:[r,i[0]]}),c=await(0,n.rn)(t,o,r,this.name,this.sessionTime,this.clientId,this.web3AuthNetwork);return(0,n.Fr)(i[0],this.name,c),{idToken:c}}throw n.RM.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnectSession(){super.checkDisconnectionRequirements();const t=await this.provider.request({method:"eth_accounts"});t&&t.length>0&&(0,n.qz)(t[0],this.name)}async disconnect(){this.rehydrated=!1,this.emit(n.n2.DISCONNECTED)}}},83501:(t,e,i)=>{i.d(e,{MetamaskAdapter:()=>c});var n=i(20240),s=i(48222),a=i.n(s),r=i(46622),o=i(96039);class c extends o.d{constructor(){super(...arguments),(0,n.Z)(this,"adapterNamespace",r.yk.EIP155),(0,n.Z)(this,"currentChainNamespace",r.EN.EIP155),(0,n.Z)(this,"type",r.hN.EXTERNAL),(0,n.Z)(this,"name",r.rW.METAMASK),(0,n.Z)(this,"status",r.MP.NOT_READY),(0,n.Z)(this,"metamaskProvider",null)}get provider(){return this.status===r.MP.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}async init(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(await super.init(t),super.checkInitializationRequirements(),this.metamaskProvider=await a()({mustBeMetaMask:!0}),!this.metamaskProvider)throw r.Ty.notInstalled("Metamask extension is not installed");this.status=r.MP.READY,this.emit(r.n2.READY,r.rW.METAMASK);try{r.cM.debug("initializing metamask adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(e){this.emit(r.n2.ERRORED,e)}}async connect(){if(super.checkConnectionRequirements(),!this.metamaskProvider)throw r.RM.notConnectedError("Not able to connect with metamask");this.status=r.MP.CONNECTING,this.emit(r.n2.CONNECTING,{adapter:r.rW.METAMASK});try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=this.metamaskProvider;if(t!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=r.MP.CONNECTED,!this.provider)throw r.RM.notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",(()=>{this.disconnect()})),this.emit(r.n2.CONNECTED,{adapter:r.rW.METAMASK,reconnected:this.rehydrated}),this.provider}catch(t){throw this.status=r.MP.READY,this.rehydrated=!1,this.emit(r.n2.ERRORED,t),r.RM.connectionError("Failed to login with metamask wallet")}}async disconnect(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnectSession(),null===(t=this.provider)||void 0===t||t.removeAllListeners(),e.cleanup?(this.status=r.MP.NOT_READY,this.metamaskProvider=null):this.status=r.MP.READY,await super.disconnect()}async getUserInfo(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(t){if(!this.metamaskProvider)throw r.RM.notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(e){if(4902!==e.code)throw e;await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget],blockExplorerUrls:[t.blockExplorer],nativeCurrency:{name:t.tickerName,symbol:t.ticker,decimals:t.decimals||18}}]})}}}}}]);
//# sourceMappingURL=501.4648ecc8.chunk.js.map