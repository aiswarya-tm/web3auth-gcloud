{"version":3,"file":"static/js/703.67d7d424.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/abstract/montgomery.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","declare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n\n// We accept hex strings besides Uint8Array for simplicity\nexport type Hex = Uint8Array | string;\n// Very few implementations accept numbers, we do it to ease learning curve\nexport type PrivKey = Hex | bigint;\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// Caching slows it down 2-3x\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  if (hex.length % 2) throw new Error('hex string is invalid: unpadded ' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// Big Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport const numberToBytesBE = (n: bigint, len: number) =>\n  hexToBytes(n.toString(16).padStart(len * 2, '0'));\nexport const numberToBytesLE = (n: bigint, len: number) => numberToBytesBE(n, len).reverse();\n// Returns variable number bytes (minimal bigint encoding?)\nexport const numberToVarBytesBE = (n: bigint) => hexToBytes(numberToHexUnpadded(n));\n\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n// Copies several Uint8Arrays into one.\nexport function concatBytes(...arrs: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrs.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\n// Bit operations\n\n// Amount of bits inside bigint (Same as n.toString(2).length)\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n// Gets single bit at position. NOTE: first bit position is 0 (same as arrays)\n// Same as !!+Array.from(n.toString(2)).reverse()[pos]\nexport const bitGet = (n: bigint, pos: number) => (n >> BigInt(pos)) & _1n;\n// Sets single bit at position\nexport const bitSet = (n: bigint, pos: number, value: boolean) =>\n  n | ((value ? _1n : _0n) << BigInt(pos));\n// Return mask for N bits (Same as BigInt(`0b${Array(i).fill('1').join('')}`))\n// Not using ** operator with bigints for old engines.\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently exponentiate num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * powMod(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Eucledian GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Currently completly inconsistent naming:\n// - readable: add, mul, sqr, sqrt, inv, div, pow, eq, sub\n// - unreadable mess: addition, multiply, square, squareRoot, inversion, divide, power, equals, subtract\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being neglible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex) => Uint8Array;\n  verify: (sig: Hex, message: Hex, publicKey: Hex) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n ** BigInt(nByteLength * 8);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // if x=0 and x_0 = 1, fail\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // Accepts 0 as well\n  function assertFieldElement(n: bigint): bigint {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU: bigint, scalar: bigint): bigint {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    // This is very ugly way, but it works because fieldLen-1 is outside of bounds for X448, so this becomes NOOP\n    // fieldLen - scalaryBytes = 1 for X448 and = 0 for X25519\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    // u[fieldLen-1] crashes QuickJS (TypeError: out-of-bound numeric index)\n    if (fieldLen === montgomeryBytes) u[fieldLen - 1] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    if (bytes.length !== montgomeryBytes && bytes.length !== fieldLen)\n      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes.length}`);\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards, ExtPointType } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { mod, pow2, isNegativeLE, Field, FpSqrtEven } from './abstract/modular.js';\nimport {\n  equalBytes,\n  bytesToHex,\n  bytesToNumberLE,\n  numberToBytesLE,\n  Hex,\n  ensureBytes,\n} from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n ** 255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n ** 252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\nexport const ed25519ctx = twistedEdwards({ ...ed25519Defaults, domain: ed25519_domain });\nexport const ed25519ph = twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = montgomery({\n  P: ED25519_P,\n  a: BigInt(486662),\n  montgomeryBits: 255, // n is 253 bits\n  nByteLength: 32,\n  Gu: BigInt(9),\n  powPminus2: (x: bigint): bigint => {\n    const P = ED25519_P;\n    // x^(p-2) aka x^(2^255-21)\n    const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n    return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n  },\n  adjustScalarBytes,\n  randomBytes,\n});\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const aPub = ed25519.getPublicKey(utils.randomPrivateKey());\n *   x25519.getSharedSecret(edwardsToMontgomery(aPub), edwardsToMontgomery(someonesPub))\n */\nexport function edwardsToMontgomery(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((y - _1n) * Fp.inv(y + _1n)));\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) = map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst { hashToCurve, encodeToCurve } = htf.createHasher(\n  ed25519.ExtendedPoint,\n  (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n  {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n  }\n);\nexport { hashToCurve, encodeToCurve };\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistrettoPoint)) throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nexport class RistrettoPoint {\n  static BASE = new RistrettoPoint(ed25519.ExtendedPoint.BASE);\n  static ZERO = new RistrettoPoint(ed25519.ExtendedPoint.ZERO);\n\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistrettoPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-bit hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-bit output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistrettoPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistrettoPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistrettoPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistrettoPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistrettoPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistrettoPoint): RistrettoPoint {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistrettoPoint): RistrettoPoint {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistrettoPoint {\n    return new RistrettoPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistrettoPoint {\n    return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\n\n// https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/14/\n// Appendix B.  Hashing to ristretto255\nexport const hash_to_ristretto255 = (msg: Uint8Array, options: htf.htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = htf.expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistrettoPoint.hashToCurve(uniform_bytes);\n  return P;\n};\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): SignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => SignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number) {\n      return new Signature(this.r, this.s, recovery);\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): Signature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash (not message: you need to hash it by yourself).\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param opts `lowS, extraEntropy, prehash`\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): Signature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = ut.createHmacDrbg<Signature>(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n// Implementation of the Shallue and van de Woestijne method for any Weierstrass curve\n// TODO: check if there is a way to merge this with uvRatio in Edwards && move to modular?\n// b = True and y = sqrt(u / v) if (u / v) is square in F, and\n// b = False and y = sqrt(Z * (u / v)) otherwise.\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  const c2 = (q - _1n) / _2n ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n ** c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n ** (c1 - _1n); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = _2n ** (i - _2n); // 18.    tv5 = i - 2;    19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n// From draft-irtf-cfrg-hash-to-curve-16\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = {\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n};\n\nconst isoMap = htf.isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n      '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n      '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n      '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n      '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n      '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n      '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n      '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n      '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n      '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n      '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n);\nconst mapSWU = mapToCurveSimpleSWU(Fp, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fp.create(BigInt('-11')),\n});\nexport const { hashToCurve, encodeToCurve } = htf.createHasher(\n  secp256k1.ProjectivePoint,\n  (scalars: bigint[]) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n  },\n  {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }\n);\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      };\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","bytes","_len","lengths","_key","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","createView","arr","DataView","byteLength","rotr","Uint32Array","padStart","utf8ToBytes","str","TextEncoder","toBytes","data","concatBytes","arrays","every","a","result","pad","set","Hash","clone","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","padOffset","isLE","super","pos","view","len","take","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","destroy","to","U32_MASK64","fromBig","lst","le","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","_1n","_2n","u8a","hexes","bytesToHex","hex","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","arrs","r","forEach","equalBytes","b1","b2","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","_len2","_key2","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","val","function","boolean","string","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","mod","num","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","validateField","opts","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","bitLen","redef","sqrtP","f","freeze","is0","isOdd","lhs","rhs","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","c","fromBytes","wNAF","constTimeNegate","condition","item","negate","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","static","toInv","fromAffine","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","normalizeZ","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","normed","lastByte","y2","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","msg","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","options","R","verify","sig","publicKey","SB","fromHex","error","ExtendedPoint","os2ip","i2osp","strxor","isBytes","isNum","hash_to_field","DST","expand","_DST","dst","validateDST","log2p","L","len_in_bytes","prb","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","createHasher","def","hashToCurve","u0","u1","encodeToCurve","encodeDST","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","montgomeryBits","powPminus2","Gu","montgomeryBytes","fieldLen","cswap","swap","x_2","x_3","dummy","assertFieldElement","a24","encodeUCoordinate","scalarMult","pointU","uEnc","decodeUCoordinate","_scalar","decodeScalar","pu","x_1","sw","z_2","z_3","t","k_t","AA","BB","DA","CB","dacb","da_cb","z2","montgomeryLadder","GuBytes","scalarMultBase","montgomery","ELL2_C1","ELL2_C2","ELL2_C3","ELL2_C4","ELL2_J","ELL2_C1_EDWARDS","FpSqrtEven","map_to_curve_elligator2_edwards25519","xMn","xMd","yMn","yMd","tv1","xd","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","y1","x2n","y21","y22","gx2","e2","e3","xn","e4","map_to_curve_elligator2_curve25519","yn","yd","htf","scalars","assertRstPoint","RistrettoPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","MAX_255B","bytes255ToNumberLE","calcElligatorRistrettoMap","r0","Ns","Ns_D_is_sq","s_","Nt","s2","W0","W1","W2","W3","ep","ap","R1","R2","emsg","u2","u1_2","u2_2","Dx","Dy","u2sq","invsqrt","D1","D2","zInv","_x","_y","one","two","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","Chi","SHA224","sha256","StructError","failure","failures","cached","rest","path","join","_cached","isObject","print","JSON","stringify","toFailure","struct","branch","refinement","toFailures","Symbol","iterator","run","coerce","coercer","schema","valid","validator","ts","Set","refiner","Struct","props","validate","is","tuples","tuple","input","done","next","shiftIterator","define","Element","Class","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","keys","Structs","first","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","genShake","hashCons","wrapConstructorWithOpts","b2n","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","privateKey","left","right","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","_bits","ProjectivePoint","weierstrass","hmac","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","cat","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","groupOrder","minLen","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","fromPrivateKey","getSharedSecret","privateA","publicB","drbg","signature","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","HMAC","iHash","oHash","buf","getPrototypeOf","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","a2","POW_2_128","c2","fe","TAGGED_HASH_PREFIXES","taggedHash","tagP","tagH","charCodeAt","messages","pointToBytes","lift_x","xx","isoMap","COEFF","xNum","xDen","yNum","yDen","mapSWU","sqrtRatio","o","c3","c4","c5","c6","c7","tv5","tv4","isQR","tvv5","SWUFpSqrtRatio","tv6","mapToCurveSimpleSWU","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","isBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","alloc","fromPublicKey","programId","concat","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","_len3","_key3","uniqueSigners","signer","_partialSign","partialSign","_len4","_key4","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","MS_PER_SLOT","fetch","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","code","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetRecentPrioritizationFeesResult","epoch","effectiveSlot","amount","postBalance","commission","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","returnData","byIdentity","range","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","rpc","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","LogsResult","previousBlockhash","parentSlot","rewards","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","authority","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","request","response","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","SOLANA","injectedProvider","engine","JRPCEngine","solanaMiddleware","getProviderHandlers","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","getBaseProviderHandlers","ethErrors","methodNotSupported","display","_req$params","_req$params2","invalidParams","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","TorusInjectedProvider","_objectSpread$1","handleInjectedProviderUpdate","setupEngine","custom","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","emit","txMessage","_req$params3","_req$params4","_req$params5","getTorusHandlers","on","configure","setupProvider","SolanaPrivateKeyProvider","_objectSpread","_providerEngineProxy","getProviderEngineProxy","keyPair","nacl","detached","encoding","_req$params6","txns","tx","networkMiddleware","rpcTarget","fetchMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchChain","updatePrivatekey","createAccountMiddleware","updateAccount","providerFactory","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","obj","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","callback","self","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","WebSocketBrowserImpl","_EventEmitter","_super","protocols","_this","socket","WebSocket","onopen","onmessage","onerror","onclose","reason","optionsOrCallback","cb","send","close","addEventListener","rnds8","rng","msCrypto","REGEX","test","byteToHex","toLowerCase","rnds","random","ReferenceError","asyncGeneratorStep","reject","_throw","arg","info","then","Constructor","toPropertyKey","_defineProperties","descriptor","configurable","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","subClass","superClass","_typeof","assertThisInitialized","_regeneratorRuntime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","mark","awrap","iter","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","_setPrototypeOf","hint","prim","toPrimitive","runtime","regeneratorRuntime","accidentalStrictMode","Function","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}