{"version":3,"file":"static/js/501.4648ecc8.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: chainConfig.chainId,\n              chainName: chainConfig.displayName,\n              rpcUrls: [chainConfig.rpcTarget],\n              blockExplorerUrls: [chainConfig.blockExplorer],\n              nativeCurrency: {\n                name: chainConfig.tickerName,\n                symbol: chainConfig.ticker,\n                decimals: chainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","exports","mustBeMetaMask","silent","timeout","arguments","length","undefined","Error","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","BaseEvmAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","EIP155","provider","status","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","method","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","signedMessage","params","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED","MetamaskAdapter","constructor","_defineProperty","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","NOT_READY","metamaskProvider","options","init","checkInitializationRequirements","detectEthereumProvider","WalletInitializationError","notInstalled","READY","log","debug","autoConnect","connect","ERRORED","checkConnectionRequirements","CONNECTING","adapter","switchChain","disconnect","reconnected","connectionError","_this$provider","cleanup","disconnectSession","removeAllListeners","switchError","code","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","decimals"],"sourceRoot":""}